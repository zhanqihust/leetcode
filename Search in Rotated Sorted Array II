class Solution {
public:
    bool search(vector<int>& nums, int target) {
        if (nums.empty()) return false;
        return search_rotated(nums,target,0,nums.size()-1);
    }
    int search_rotated(vector<int>& nums, int target, int left, int right){
        if (left > right) return false;
        int mid = (left + right)/2;
        if (nums[mid] == target) return true;
        //int mid1 = mid, mid2 = mid;
        //while (mid > left && nums[mid] == nums[mid-1]){mid--};
        if (nums[left] < nums[mid]){ // left side sorted;
            if (nums[left] <= target && target < nums[mid]){  
                return search_rotated(nums,target,left,mid-1);
            }else{ 
                return search_rotated(nums,target,mid + 1,right);
            }
        }else if (nums[left] > nums[mid]){ // right side sorted
            if (mid < right && nums[mid+1] <= target && target <= nums[right]){
                return search_rotated(nums,target,mid+1,right);
            }else{
                return search_rotated(nums,target,left,mid-1);
            }
        }else{
            left = left + 1;
            while(left <= right && nums[left] == nums[left-1]){
                left++;
            }
            return search_rotated(nums,target,left,right);
        }
    }
};
